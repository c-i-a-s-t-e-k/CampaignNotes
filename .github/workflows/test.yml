name: Java CI with Neo4j and Qdrant

on:
  push:
    branches: [ master, develop, github-actions-feature ]
  pull_request:
    branches: [ master, develop, github-actions-feature ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      # Neo4j database service
      neo4j:
        image: neo4j:5.17
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7474:7474
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10

    #   # Qdrant vector database service
    #   qdrant:
    #     image: qdrant/qdrant:latest
    #     ports:
    #       - 6333:6333
    #       - 6334:6334
    #     options: >-
    #       --health-cmd "curl -f http://localhost:6333/health || exit 1"
    #       --health-interval 15s
    #       --health-timeout 15s
    #       --health-retries 20
    #       --health-start-period 120s

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: Wait for Neo4j to be ready
      run: |
        echo "Waiting for Neo4j to be ready..."
        timeout 60 bash -c 'until docker exec ${{ job.services.neo4j.id }} cypher-shell -u neo4j -p password "RETURN 1"; do sleep 2; done'
        echo "Neo4j is ready!"

    - name: Start Qdrant
      run: |
        docker run -d --name qdrant \
          -p 6333:6333 -p 6334:6334 \
          qdrant/qdrant:latest
      
    - name: Wait for Qdrant
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:6333; do sleep 5; done'

    - name: Create SQLite database
      run: |
        echo "Creating SQLite database with schema..."
        sqlite3 /home/runner/work/CampaignNotes/CampaignNotes/app/sqlite.db "CREATE TABLE IF NOT EXISTS campains (uuid TEXT PRIMARY KEY, name TEXT, neo4j_label TEXT, quadrant_collection_name TEXT);"
        echo "SQLite database created successfully!"

    - name: Create .env file for tests
      run: |
        echo "Creating .env file with database connection details..."
        touch /home/runner/work/CampaignNotes/CampaignNotes/app/.env
        
        echo "NEO4J_URI=neo4j://localhost" >> /home/runner/work/CampaignNotes/CampaignNotes/app/.env
        echo "NEO4J_USER=neo4j" >> /home/runner/work/CampaignNotes/CampaignNotes/app/.env
        echo "NEO4J_PASSWORD=password" >> /home/runner/work/CampaignNotes/CampaignNotes/app/.env
        echo "QUADRANT_URL=localhost" >> /home/runner/work/CampaignNotes/CampaignNotes/app/.env
        # LANGFUSE_SECRET_KEY=${{ secrets.LANGFUSE_SECRET_KEY }}
        # LANGFUSE_PUBLIC_KEY=${{ secrets.LANGFUSE_PUBLIC_KEY }}
        echo "LANGFUSE_HOST=${{ secrets.LANGFUSE_HOST }}" >> /home/runner/work/CampaignNotes/CampaignNotes/app/.env
        # QUADRANT_GRPC_PORT=${{ secrets.QUADRANT_GRPC_PORT }}
        # QUADRANT_URL=${{ secrets.QUADRANT_URL }}
        echo ".env file created!"
        cat /home/runner/work/CampaignNotes/CampaignNotes/app/.env

    - name: Verify database connections
      run: |
        echo "Verifying Neo4j connection..."
        curl -u neo4j:password http://localhost:7474 || echo "Neo4j HTTP connection failed"
        
        echo "Verifying Qdrant connection..."
        curl http://localhost:6333 || echo "Qdrant connection failed"
        
        echo "Verifying SQLite database..."
        sqlite3 /home/runner/work/CampaignNotes/CampaignNotes/app/sqlite.db ".tables" || echo "SQLite verification failed"

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Run tests
      run: |
        cd app
        ../gradlew test --stacktrace
      env:
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: password
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
        LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
        LANGFUSE_HOST: ${{ secrets.LANGFUSE_HOST }}
        QUADRANT_GRPC_PORT: ${{ secrets.QUADRANT_GRPC_PORT }}
        QUADRANT_URL: ${{ secrets.QUADRANT_URL }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/tests/
          app/build/test-results/
